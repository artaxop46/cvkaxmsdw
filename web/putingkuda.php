<?php
$list = $_GET['list'];
$subjectnya = $_GET['keyword'];
$pisah = explode("|", $list);

while(True) {
$cookie = "cookie/other.cookie";

if(file_exists($cookie)) unlink($cookie);

// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
    $headers[] = "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36";
    $headers[] = "Pragma: no-cache"; 
    $headers[] = "Accept: */*" ;
    $pageutama = curl('https://emailsettings.firetrust.com/settings?q='.$pisah[0].'', 0, $headers, $cookie, 0, 1, 0);
    //print_r($page);
    if ($pageutama) {
   //print_r($pageutama);
    if (strpos($pageutama, "IMAP")) {
  
    $address = getStr($pageutama, '"protocol":"IMAP","address":"', '"');
    $port = getStr($pageutama, '"protocol":"IMAP","address":"'.$address.'","port":', ',');
    $secure = getStr($pageutama, '"protocol":"IMAP","address":"'.$address.'","port":'.$port.',"secure":"', '"');
    imap_timeout(IMAP_OPENTIMEOUT, 5);
    $mbox = imap_open("{".$address.":".$port."/".$secure."}INBOX", "$pisah[0]", "$pisah[1]", NULL, 0);
    if ($mbox == true) { 
           //Attempt to connect using the imap_open function.
           $imapResource = imap_open('{'.$address.':'.$port.'/'.$secure.'}', $pisah[0], $pisah[1]);
    
           //If the imap_open function returns a boolean FALSE value,
           //then we failed to connect.
            
           //If we get to this point, it means that we have successfully
           //connected to our mailbox via IMAP.
            
           //Lets get all emails that were received since a given date.
           $search = 'SUBJECT "'.$subjectnya.'"';
           $emails = imap_search($imapResource, $search);
            
           //If the $emails variable is not a boolean FALSE value or
           //an empty array.
           if(!empty($emails)){
               //Loop through the emails.
               $totalsubject = 0;
               foreach($emails as $email){
                   $totalsubject++;
                   //Fetch an overview of the email.
           $overview = imap_fetch_overview($imapResource, $email);
           $overview = $overview[0];
           //Print out the subject of the email.
           $subjectmail = '' . htmlentities($overview->subject) . '';
           //Print out the sender's email address / from email address.
           //echo 'From: ' . $overview->from . '<br><br>';
           //Get the body of the email.
                   }
               }
           if ($emails) {
           $datarespon = array("status" => "live", "totalhits" => "$totalsubject");
        echo json_encode($datarespon);
        break;
           } else {
            $datarespon = array("status" => "live", "totalhits" => "Cant Found Key");
        echo json_encode($datarespon);
        break;
           }
      } else {
        $datarespon = array("status" => "die");
        echo json_encode($datarespon);
        break;
    }
    } else if (!strpos($pageutama, "IMAP")) {
        if (strpos($pageutama, "POP3")) {
        $address = getStr($pageutama, '"protocol":"POP3","address":"', '"');
        $port = getStr($pageutama, '"protocol":"POP3","address":"'.$address.'","port":', ',');
        $secure = getStr($pageutama, '"protocol":"POP3","address":"'.$address.'","port":'.$port.',"secure":"', '"');
        imap_timeout(IMAP_OPENTIMEOUT, 5);
        $mbox = imap_open("{".$address.":".$port."/".$secure."}INBOX", "$pisah[0]", "$pisah[1]", NULL, 0);
        if ($mbox == true) {
           //Attempt to connect using the imap_open function.
           $imapResource = imap_open('{'.$address.':'.$port.'/'.$secure.'}', $pisah[0], $pisah[1]);
        
           //If the imap_open function returns a boolean FALSE value,
           //then we failed to connect.
            
           //If we get to this point, it means that we have successfully
           //connected to our mailbox via IMAP.
            
           //Lets get all emails that were received since a given date.
           $search = 'SUBJECT "'.$subjectnya.'"';
           $emails = imap_search($imapResource, $search);
            
           //If the $emails variable is not a boolean FALSE value or
           //an empty array.
           if(!empty($emails)){
               //Loop through the emails.
               foreach($emails as $email){
                   //Fetch an overview of the email.
               $overview = imap_fetch_overview($imapResource, $email);
               $overview = $overview[0];
               //Print out the subject of the email.
               $subjectmail = '' . htmlentities($overview->subject) . '';
               //Print out the sender's email address / from email address.
               //echo 'From: ' . $overview->from . '<br><br>';
                   }
               }
               if ($emails) {
                $datarespon = array("status" => "live", "totalhits" => "$totalsubject");
        echo json_encode($datarespon);
        break;
               } else {
                $datarespon = array("status" => "live", "totalhits" => "Cant Found Key");
        echo json_encode($datarespon);
        break;
               }
          } else {
            $datarespon = array("status" => "die");
        echo json_encode($datarespon);
        break;
        }
            }
    } else {
        echo "Server Not Found";
    }
    } else {
        echo "Proxy Time-Out / Dead";
        continue;
    }
}
function curl($url, $body=0, $header=0, $cookie=0, $nobody=0, $httpheader=0, $follow=0){
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/5.0 (Linux; Android 6.0.1; Redmi 4A Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/75.0.3770.101 Mobile Safari/537.36");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_ENCODING , "gzip, deflate");
    curl_setopt($ch, CURLOPT_TIMEOUT, 15);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
    if($follow) {
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
    }
    if($header) {
            curl_setopt($ch, CURLOPT_HTTPHEADER, $header);
            curl_setopt($ch, CURLOPT_ENCODING, "gzip");
    }
    if($httpheader){
        curl_setopt($ch, CURLOPT_HEADER, 1);
    }
    if($cookie){
        curl_setopt($ch, CURLOPT_COOKIEJAR, $cookie);
        curl_setopt($ch, CURLOPT_COOKIEFILE, $cookie);
    }
    if($body){
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
    } 
    if($nobody) {
        curl_setopt($ch, CURLOPT_NOBODY, true);
    }
    if($body == "0") {
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");
    }
    $x = curl_exec($ch);
    curl_close($ch);
    return $x;
}
function getStr($string,$start,$end){
    $str = explode($start,$string);
    $str = explode($end,$str[1]);
    return $str[0];
}
function fetch_value($str,$find_start,$find_end) {
$start = @strpos($str,$find_start);
if ($start === false) {
return "";
}
$length = strlen($find_start);
$end    = strpos(substr($str,$start +$length),$find_end);
return trim(substr($str,$start +$length,$end));
}
function fetchCurlCookies($source) {
    preg_match_all('/^Set-Cookie:\s*([^;]*)/mi', $source, $matches);
    $cookies = array();
    foreach($matches[1] as $item) {
        parse_str($item, $cookie);
        $cookies = array_merge($cookies, $cookie);
    }
    return $cookies;
}

